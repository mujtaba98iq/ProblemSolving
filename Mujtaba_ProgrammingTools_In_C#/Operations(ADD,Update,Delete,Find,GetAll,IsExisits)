
namespace clsKarateAccessLayer
{
    public class clsBeltRank
    {
        public struct stBeltInfo
        {
            public string RankName;
            public float TestFees;
        }

        public static int AddNewPerson(stPersonInfo PersonInfo)
        {

            int ID;
            SqlConnection connection = new SqlConnection(Settings.conntection);
            string query = "Insert into Person(Name, Email, Phone, DateOfBirth, Gendor, Address, PersonalPicture) values (@Name, @Email, @Phone, @DateOfBirth, @Gendor, @Address, @PersonalPicture);select scope_Identity();";

            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("Name", PersonInfo.Name);
            if (string.IsNullOrWhiteSpace(PersonInfo.Email))
                command.Parameters.AddWithValue("Email", DBNull.Value);
            else
                command.Parameters.AddWithValue("Email", PersonInfo.Email);
            command.Parameters.AddWithValue("Phone", PersonInfo.Phone);
            command.Parameters.AddWithValue("DateOfBirth", PersonInfo.DateOfBirth);
            command.Parameters.AddWithValue("Gendor", PersonInfo.Gendor);
            command.Parameters.AddWithValue("Address", PersonInfo.Address);
            command.Parameters.AddWithValue("PersonalPicture", PersonInfo.PersonalPicture);

            connection.Open();
            object obj = command.ExecuteScalar();
            ID = Convert.ToInt32(obj);
            connection.Close();
            return ID;
        }

        public static bool UpdateBelt(int RankID, stBeltInfo BeltInfo)
        {

            SqlConnection connection = new SqlConnection(Settings.conntection);
            string query = @"Update BeltRank set RankName = @RankName, TestFees = @TestFees
                    where RankID = @RankID;";

            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("RankID", RankID);
            command.Parameters.AddWithValue("RankName", BeltInfo.RankName);
            command.Parameters.AddWithValue("TestFees", BeltInfo.TestFees);

            connection.Open();
            int result = command.ExecuteNonQuery();
            connection.Close();
            return result > 0;
        }
        public static bool IsExist(int RankID)
        {

            SqlConnection connection = new SqlConnection(Settings.conntection);
            string query = "select found = 1 from BeltRank where RankID = @RankID;";

            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("RankID", RankID);

            connection.Open();
            int result = Convert.ToInt32(command.ExecuteScalar());
            connection.Close();
            return result > 0;
        }
        public static bool DeleteBelt(int BeltID)
        {

            SqlConnection connection = new SqlConnection(Settings.conntection);
            string query = "Delete from BeltRank where RankID = @RankID;";

            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("BeltID", BeltID);

            connection.Open();
            int result = command.ExecuteNonQuery();
            connection.Close();
            return result > 0;
        }
        public static DataTable GetAllBeltRank()
        {
            DataTable dt = new DataTable();
            SqlConnection connection = new SqlConnection(Settings.conntection);
            string query = @"Select * from BeltRank;";

            SqlCommand command = new SqlCommand(query, connection);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();

            if (reader.HasRows)
                dt.Load(reader);
            reader.Close();
            connection.Close();
            return dt;
        }
 public static bool Find(int BeltID, ref stBeltInfo BeltInfo)
        {

            bool IsFound = false;
            SqlConnection connection = new SqlConnection(Settings.conntection);
            string query = @"Select * from BeltRank where BeltID = @BeltID;";

            SqlCommand command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("BeltID", BeltID);
            connection.Open();
            SqlDataReader Reader = command.ExecuteReader();

            if (Reader.Read())
            {
                
                BeltInfo.RankName = (string)Reader["RankName"];
              
                BeltInfo.TestFees = (float)Reader["TestFees"];

                IsFound = true;
            }
            connection.Close();
            return IsFound;
        }
        public static float GetTestFeesByID(int RankID)
        {
            float TestFees = -1;

            SqlConnection Connection = new SqlConnection(Settings.conntection);

            string Query = @"select TestFees from BeltRank where RankID=@RankID";
            SqlCommand Command = new SqlCommand(Query, Connection);
            Command.Parameters.AddWithValue("@RankID", RankID);


            try
            {
                Connection.Open();
                object Result = Command.ExecuteScalar();
                if (Result != null)
                {
                    TestFees = Convert.ToSingle(Result.ToString());
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return TestFees;
        }
    }
}
